\input texinfo  @c -*- texinfo -*-
@c %**start of header
@setfilename csv-lens.info
@settitle CSV Lens Manual 0.8
@c %**end of header

@copying
This is the CSV Lens manual, version 0.8

Copyright @copyright{} 2013, 2015, 2023 Willem Rein Oudshoorn.
@end copying

@dircategory Emacs
@direntry
* CSV-Lens: (csv-lens).         Viewing a CSV file one line at the time.
@end direntry

@titlepage
@title CSV Lens
@subtitle Viewing a CSV File one Line at the Time
@author Willem Rein Oudshoorn
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Installing, (dir), (dir)
@top CSV Lens

This is a description of the CSV Lens mode
@end ifnottex


@menu
* Installing::
* Using CSV Lens::
* Customizing::
@end menu

@node Installing, Using CSV Lens, Top, Top
@chapter Installing

CSV Lens is installed by adding the directory of the source files to the emacs load path and
requiring @code{csv-lens} like this:

@lisp
(add-to-list 'load-path "~/<directory>/csv-lens/" t)
(require 'csv-lens)
@end lisp

Alternatively when using @code{use-package} the following stanza will work

@lisp
(use-package csv-lens)
@end lisp

when installed with the package manager.  If it is manually installed, you have to supply
the @code{:load-path} to @code{use-package}.

Note that both methods above will not install any keybindings to use @code{csv-lens}.
@xref{Activating} on how to add keybindings.

@menu
* Activating::
@end menu

@c ----------------------------------------
@node Activating,  , Installing, Installing
@section Activating

When in a CSV buffer you can start using CSV Lens by issuing the command
@command{csv-lens-select}.  Which is bound by default to the key
@kbd{C-return} in the minor mode @command{csv-lens-mode}.

By adding the following code to the @code{.emacs} file the minor mode
will be activated by default for all CSV files.

@lisp
(add-hook 'csv-mode-hook 'csv-lens-mode)
@end lisp

Alternatively, when using @code{use-package} you should use the @code{:init} parameter like this:

@lisp
(use-package csv-lens
  :init (add-hook 'csv-mode-hook 'csv-lens-mode))
@end lisp
@ignore
The :init is executed before the package is loaded and :config after the package is loaded.
However, because the package has autoloads, the :config is only executed
after the first call to csv-lens-mode.  So the hook will not be added.
That is why we use :init.
@end ignore
@c --------------------------------------------------------------------------------
@node  Using CSV Lens, Customizing, Installing, Top
@chapter Using CSV Lens



@c ----------------------------------------

@menu
* Example::
* Navigating::
* Columns::
@end menu

@node Example, Navigating, Using CSV Lens, Using CSV Lens
@section Example

If installed as suggested the key binding @kbd{C-return} on a line in a
CSV file will bring up a @command{csv-lens-detail-mode} buffer, which
will show the data of the line in the CSV file under point in a column
view.

When applied to the following CSV file

@cartouche
@example
System,Disk,Time,IO Rate,Bytes Transferred,Read Rate,Write Rate
Alpha,C:,20130602190751.532000-240,1000,1232,800,200
Alpha,D:,20130602190752.532000-240,12000,1232,800,200
Beta,C:,20130602191711.532000-240,9000,1232,800,200
Alpha,C:,20130602191712.532000-240,1200,1232,800,200
Alpha,D:,20130602191712.533000-240,14000,1232,800,200
Beta,C:,20130602191751.532000-240,10000,1232,800,200
Alpha,C:,20130602192751.532000-240,1800,1232,800,200
Alpha,D:,20130602192751.532000-240,15000,1232,800,200
Beta,C:,20130602192751.532000-240,12000,1232,800,200
Alpha,C:,20130602193751.532000-240,2100,1232,800,200
Alpha,D:,20130602193751.532000-240,15500,1232,800,200
Beta,C:,20130602193751.532000-240,13400,1232,800,200
Alpha,C:,20130602194751.532000-240,2200,1232,800,200
Alpha,D:,20130602194751.532000-240,18000,1232,800,200
Beta,C:,20130602194751.532000-240,15000,1232,800,200
Alpha,C:,20130602195751.532000-240,2500,1232,800,200
Alpha,D:,20130602195751.532000-240,21000,1232,800,200
Beta,C:,20130602195751.532000-240,18000,1232,800,200
@end example
@end cartouche

at the second line, the column view will look like

@cartouche
@example
FILE: demo.csv Spark Lines use Values for plotting

  Line:                 2
  System:               Alpha
  Disk:                 C:
  Time:                 20130602190751.532000-240
  IO Rate:              1000
  Bytes Transferred:    1232
  Read Rate:            800
  Write Rate:           200
@end example
@end cartouche

While in this buffer we can navigate to other rows in the CSV file by
using the @kbd{n} and @kbd{p} key, which will go to the next respectively previous
row in the underlying CSV file.

@heading Formatting

The timestamps are still a bit hard to read.   If we are looking at these
files a lot, it is worth configuring CSV Lens so it will display these timestamps nicely.

One way of doing this is to apply do the following:

@cartouche
@example lisp
(defun example-format-time (time)
  "Return a nicely formatted TIME."
  (if (> (length time) 18)
      (let ((year (substring time 0 4))
            (month (substring time 4 6))
            (day (substring time 6 8))
            (hour (substring time 8 10))
            (minute (substring time 10 12))
            (second (substring time 12 14))
            (offset (number-to-string
                      (/ (string-to-number (substring time -4)) 60))))
        (concat year "-" month "-" day " "
                hour ":" minute ":" second " (" offset ")*" ))
    time))

(add-to-list 'csv-lens-configurations
             '("Example"
                (("Time"
                  :format-function example-format-time))))
@end example
@end cartouche

The details of how this works are explained later.  But the most important part is that
you can see that we associate with the @samp{Time} column the function @code{example-format-time} function.

After applying the above code the column view will look like this

@cartouche
@example
FILE: example.csv Type: Example Spark Lines use Values for plotting

  Line:              2                          
  System:            Alpha                      
  Disk:              C:                         
  Time:              2013-06-02 19:07:51 (-4)*  
  IO Rate:           1000                       
  Bytes Transferred: 1232                       
  ReadsRate:         800                        
  Write Rate:        200                        
@end example
@end cartouche

To see the original value in the CSV file you disable/enable the formatting by
using @kbd{f} key, which is bound to @code{csv-lens-format-toggle}.

@heading Keys

In the underlying CSV file there are multiple rows about @samp{System}
@samp{Alpha} and @samp{Disk} @samp{C:}, each for a different
timestamp.  CSV Lens allows quick navigation to go to the next or previous
rows describing the same thing.

First step is telling CSV Lens what the columns are that identify the
same thing.  This can be done by pressing the @kbd{K} key when point
is on the line @samp{System} and @samp{Disk}.  This will indicate that
these columns are considered key columns and the status of these
columns is marked by the letter @samp{K} in the left column, like this

@cartouche
@example
FILE: example.csv Type: Example Spark Lines use Values for plotting

  Line:              2                          
K System:            Alpha                      
K Disk:              C:                         
  Time:              2013-06-02 19:07:51 (-4)*  
  IO Rate:           1000                       
  Bytes Transferred: 1232                       
  Reads Rate:        800                        
  Write Rate:        200                        
@end example
@end cartouche

After this step the keys @kbd{N} and @kbd{P} will move the next respectively the previous
line in the CSV file for which the @samp{System} and @samp{Disk} fields have the same value.

In addition, it will show the file now in three column mode, one column for the current
row, one column for the previous displayed and one column showing the difference, like this:

@fonttextsize 10
@cartouche
@example
FILE: example.csv Type: Example Spark Lines use Values for plotting

  Line:              5                         2                         3                          
K System:            Alpha                     Alpha                                                
K Disk:              C:                        C:                                                   
  Time:              2013-06-02 19:17:12 (-4)* 2013-06-02 19:07:51 (-4)*                            
  IO Rate:           1200                      1000                      200                        
  Bytes Transferred: 1232                      1232                      0                          
  Reads Rate:        800                       800                       0                          
  Write Rate:        200                       200                       0                          
@end example
@end cartouche
@fonttextsize 11

The example above is the situation after pressing @kbd{N} in the previous screenshot.
We see that we moved from line 2 to line 5.  The second column still shows the values
of line 2 and the third column shows the difference.

Just like the formatting function, we can specify that some columns are key columns by default:

@cartouche
@example lisp
(add-to-list 'csv-lens-configurations
             '("Example"
                (("Time"
                  :format-function example-format-time)
                 (("System" "Disk") :key t))))
@end example
@end cartouche

@c ----------------

@node Navigating, Columns, Example, Using CSV Lens
@section Navigating

When in the CSV Lens Detail buffer you can select a different row
of the underlying CSV file to be displayed.  The most basic of navigational commands are

@table @kbd
@item n
@itemx csv-lens-next
Show the content of the next line of the underlying CSV file.
This command ignores any setting of key columns.

@item p
@itemx csv-lens-prev
Show the content of the previous line of the underlying CSV file.
Like the @kbd{n} command, it ignores any setting of key columns.
@end table

More sophisticated navigation take into account the values of the key columns
[see xref key column etc.]

@table @kbd
@item N
@itemx csv-lens-next/prev-record
Show the content of the next line for which the values of the key columns
are the same as the currently selected row.
@item P
@itemx csv-lens-next/prev-record
Similarly to the @kbd{N} command, but looks backwards.
@item <
@itemx csv-lens-jump-first-line-for-key-value
Shows the content of the first line in the CSV file for which the key columns have the same value as for the currently selected row.
@item >
@itemx csv-lens-jump-last-line-for-key-value
This will show the last line in the CSV file for which the key columns have the same value the current selected row.
@item j
@itemx csv-lens-next-value
Show the content of the first line for which the value for the selected column is different,
but for which the key column values are the same.

The selected column is the column corresponding the row under point in
the CSV Lens Detail buffer.  If the cursor is on a key column it will
give an error, because looking at all rows for which the key columns are
the same will obviously not find a new value for the selected column.
@item k
@itemx csv-lens-prev-value
The same as @kbd{j} but this command looks backwards in the file.
@end table

Additionally it is possible to re-synchronize the CSV Lens Detail buffer with the underlying CSV buffer.

@table @kbd
@item C-@kbd{RET}
@itemx M-x csv-lens-pop-to-source-buffer
Select the buffer of the underlying CSV file.  This will not move point in the CSV buffer, nor update the CSV Detail buffer.
@item o
@itemx M-x csv-lens-switch-to-source-buffer
Select the buffer of the underlying CSV file, and move point in the CSV buffer to the currently selected row in the CSV Detail Buffer.
@item .
@itemx csv-lens-current
Update the content of the CSV Detail buffer to show the content for point in the underlying CSV buffer.
@end table

@c ----------------------------------------
@node Columns,  , Navigating, Using CSV Lens
@section Columns

Each column in the CSV file is shown as a line in the CSV Detail buffer.
Not all columns are equal, some are key columns, some you might want to
hide etc.  The properties of the column can be modified with the
following key bindings

@table @kbd
@item K
@itemx csv-lens-toggle-key-column
Mark the column as key column.  (If the column is already a key column
un-mark the column.)  Key columns are important because they determine
which rows in the CSV file go together.  This is used for navigation and
plotting the spark-lines. [ADD XREF for both].

@item h
@itemx csv-lens-hide-column
Hide the column from display.  Or un-hide the column if it is already hidden.
A hidden column is not shown, unless the show all is activated
(@xref{unhide-all,,csv-lens-column-ignore-state-toggle}).
To un-hide a hidden column, first use the show all to show the hidden columns, then un hide it with @kbd{h} again.

@item b
@itemx csv-lens-bold-column
Highlight the column (bold).  This will make the column stand out between the other columns.
Like all other column state, when used on a highlighted column, un-highlight it.

@item c
@itemx csv-lens-hide-constant-columns
Hide all constant columns.  A column is considered constant if the values for the column
are constant for each key(s) separately.

@ignore
@item S
@itemx csv-lens-spark-line
Show a spark line for the values of the column for the current keys.
Note that the spark line is not dynamically updated when a new key is selected.
@end ignore
@end table

The following changes cannot be made for individual columns but are global (they apply to all columns).

@table @kbd
@anchor{unhide-all}
@item s
@itemx csv-lens-column-ignore-state-toggle
Show all, this will ignore the hide state of any column and show them again.
This is convenient to bring back hidden columns.

@item U
@itemx csv-lens-normal-all
Remove all marks from the columns and reverting them to normal.

@ignore
@item I
@itemx csv-lens-spark-line-toggle-incremental
Toggle the logic for drawing spark lines between 'value' and 'delta'.
Normally spark lines are drawn taking the values as is ('value').  If
'delta' is selected, the values plotted are the difference between successive values.

The first line in the CSV Lens Detail buffer shows which mode is used.

@item Z
@itemx csv-lens-spark-line-for-all-visible-columns
Draw spark lines for all columns.  (See XREF explanation for S).
@end ignore
@item f
@itemx csv-lens-format-toggle
Toggle the formatting of the columns.  (@xref{Column Formatting}).
@end table


@menu
* Column Formatting::
@end menu

@node Column Formatting, ,Columns,Columns
@section Column Formatting

The displayed values from the underlying CSV file can be formatted
with formatting functions.  By default, the value is displayed as is.
If that is not required, a formatting function can be applied.  A
formatting function is a function that takes one argument, the value
to be converted, which is a string.  The result of the formatting
function should also be a string.

The actual formatting function being used is determined by the column name, in the following way:

@enumerate
@item
If the formatting is disabled, use the @code{identity} function, which returns the string as is.
By default formatting is enabled.  This can be toggled with @kbd{f} or @code{csv-lens-format-toggle}.
@item
If the user has manually selected a formatting function, the user specified format function is used.

Manually selecting a formatting can be done by pressing @kbd{F}, or calling @code{csv-lens-set-key-column-formatter}.
This will provide the user with the choice of the formatters listed in @code{csv-lens-formatters}. 
@xref{Adding Formatters}.

@item
If in the current configuration [ADD XREF] a format function is specified for this column, use that one.
@item
If in the current configuration the column @t{t} has a format function specified, use that one.
@item
Finally, if none of the above is relevant, use @code{identity} and use the string as is.
@end enumerate



@c --------------------------------------------------------------------------------
@node Customizing,  , Using CSV Lens, Top
@chapter Customizing

There are two variables avaiable to modify the behaviour of CSV Lens:

@table @code
@item csv-lens-configurations
This variable determines the default state of the columns being displayed.

@item csv-lens-formatters
A list of formatters that are available for interactive use.
@end table

--------------------------

@enumerate
@item
Determine the header names of the columns of the CSV file

@item
Use the header names to determine a configuration

@item
Use the configuration to format the detail buffer.
@end enumerate

Step 1 is hardcoded, but step 2 and 3 together detemine how the detail buffer displays the underlying data.
The following two sections describe these two steps.

@menu
* Configuration one Type of CSV File::
* Multiple Sets of Configurations::
@end menu

@node Configuration one Type of CSV File,Multiple Sets of Configurations, Customizing, Customizing
@comment  node-name,  next,  previous,  up
@section Configuration one Type of CSV File

A configuration for a CSV file is an alist whose keys
are column names or a list of column names and the values are property
lists containing the default state of the columns.

So in general the format is a list of specifications, where each specification looks like:
@table @code
@item (COLUMN-NAME . PROPERTY-LIST)
@item ((COLUMN-NAME-1 COLUMN-NAME-2 ...) . PROPERTY-LIST)
@end table

The @code{COLUMN-NAME} is normally a string, which is compared to the column headers in the CSV file (case sensitive).  As a special case @code{COLUMN-NAME} can be @t{t}, which matches any column and can be used to provide
default values for all columns in the CSV file.

The @code{PROPERTY-LIST} describes the column and can contain the following keys
@table @code
@item :key
A boolean, @code{t} if the column is considered a key column.  The default value is @code{nil}.
@item :bold
A boolean, @code{t} if the column should standout.  The default value is @code{nil}.
@item :hidden
A boolean, @code{t} if the column should be hidden.  The default value is @code{nil}.
@item :diff-function
A function taking two arguments, each being the un parsed string value of a value of column and returning a string representation of the difference.

This function is used for displaying the difference between two subsequent records.
See @kbd{N} and @kbd{P} for ways to display the difference.

If no function is specified it defaults to @code{csv-lens-diff-number}.  This function
will try to parse the argument as numbers and display their difference.
@item :format-function
A function taking one argument, the un parsed string value, and returning a string to display.
This function is active unless formatting is disabled by @kbd{f}.

The default is @code{identity}.
@end table



@node Multiple Sets of Configurations,  ,Multiple Sets of Configurations, Customizing
@comment  node-name,  next,  previous,  up
@section Multiple Sets of Configurations

Different CSV files have different needs for formating.  It is therefore
possible to switch between sets of configurations.  Also, the mode will
try to select automatically the best configuration for the particular
CSV file.

The list of configurations that are considered is stored in the variable @var{csv-lens-configurations}.
Each entry of this list is list of either 2 or 3 elements like this:

@lisp
(name configuration)
(name configuration compare-function)
@end lisp

Here @code{name} is a string that names the configuration.  This name
can be used to force CSV-Lens to use a specific configuration if the
automatic detection does not work correctly.  

The @code{configuration} part is either a list of specifications, as
documented in @ref{Configuration one Type of CSV File}, or a function
returning such a configuration.

If @code{configuration} is a function, it should be a function taking
one argument, which is a list of strings containing the column
headers.

The optional @code{compare-function} is used to decide which
configuration is used for the file.

This function has three arguments @code{configuration},
@code{best-upto-now}, and @code{columns}.  The return value of this
function should be either @code{nil} or a @code{configuration}, which is
considered the best upto now, and will be used as the
@code{best-upto-now} argument in the next invocation of a compare
function.

A note about returning @code{nil}.  When implementing a
@code{compare-function} one normally only returns @code{nil} if both
hold true: The argument @code{configuration} is not a valid
configuration for the @code{columns} and @code{best-upto-now} is
@code{nil}. This is because the idea is that this function will return
the best of the two arguments.

The default implementation does a lexical compare between @code{(columns
- configuration, configuration - columns)}.  If it is a tie, it returns
the @code{best-upto-now} configuration, ensuring the first listed
configuration wins.

The lexical compare has the effect that it gives preference to:
@enumerate
@item
The most columns in the CSV file have an entry in the configuration.
@item
If that is the same, the smallest configuration winds.
@end enumerate
@bye
