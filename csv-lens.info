This is csv-lens.info, produced by makeinfo version 6.8 from
csv-lens.texi.

This is the CSV Lens manual, version 0.8

   Copyright (C) 2013, 2015, 2023 Willem Rein Oudshoorn.
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* CSV-Lens: (csv-lens).         Viewing a CSV file one line at the time.
END-INFO-DIR-ENTRY


File: csv-lens.info,  Node: Top,  Next: Installing,  Prev: (dir),  Up: (dir)

CSV Lens
********

This is a description of the CSV Lens mode

* Menu:

* Installing::
* Using CSV Lens::
* Customizing::

 -- The Detailed Node Listing --

Installing

* Activating::

Using CSV Lens

* Example::
* Navigating::                  n
* Columns::
* Compare/Difference::

Columns

* Column Formatting::
* Key Columns::

Customizing

* Multiple Sets of Configurations::
* Configuration one Type of CSV File::
* Formatters for Interactive Use::



File: csv-lens.info,  Node: Installing,  Next: Using CSV Lens,  Prev: Top,  Up: Top

1 Installing
************

CSV Lens is installed by adding the directory of the source files to the
emacs load path and requiring 'csv-lens' like this:

     (add-to-list 'load-path "~/<directory>/csv-lens/" t)
     (require 'csv-lens)

   Alternatively when using 'use-package' the following stanza will work

     (use-package csv-lens)

   when installed with the package manager.  If it is manually
installed, you have to supply the ':load-path' to 'use-package'.

   Note that both methods above will not install any keybindings to use
'csv-lens'.  *Note Activating:: on how to add keybindings.

* Menu:

* Activating::


File: csv-lens.info,  Node: Activating,  Prev: Installing,  Up: Installing

1.1 Activating
==============

When in a CSV buffer you can start using CSV Lens by issuing the command
'csv-lens-select'.  Which is bound by default to the key 'C-return' in
the minor mode 'csv-lens-mode'.

   By adding the following code to the '.emacs' file the minor mode will
be activated by default for all CSV files.

     (add-hook 'csv-mode-hook 'csv-lens-mode)

   Alternatively, when using 'use-package' you should use the ':init'
parameter like this:

     (use-package csv-lens
       :init (add-hook 'csv-mode-hook 'csv-lens-mode))


File: csv-lens.info,  Node: Using CSV Lens,  Next: Customizing,  Prev: Installing,  Up: Top

2 Using CSV Lens
****************

* Menu:

* Example::
* Navigating::                  n
* Columns::
* Compare/Difference::


File: csv-lens.info,  Node: Example,  Next: Navigating,  Prev: Using CSV Lens,  Up: Using CSV Lens

2.1 Example
===========

If installed as suggested the key binding 'C-return' on a line in a CSV
file will bring up a 'csv-lens-detail-mode' buffer, which will show the
data of the line in the CSV file under point in a column view.

   When applied to the following CSV file

     System,Disk,Time,IO Rate,Bytes Transferred,Read Rate,Write Rate
     Alpha,C:,20130602190751.532000-240,1000,1232,800,200
     Alpha,D:,20130602190752.532000-240,12000,1232,800,200
     Beta,C:,20130602191711.532000-240,9000,1232,800,200
     Alpha,C:,20130602191712.532000-240,1200,1232,800,200
     Alpha,D:,20130602191712.533000-240,14000,1232,800,200
     Beta,C:,20130602191751.532000-240,10000,1232,800,200
     Alpha,C:,20130602192751.532000-240,1800,1232,800,200
     Alpha,D:,20130602192751.532000-240,15000,1232,800,200
     Beta,C:,20130602192751.532000-240,12000,1232,800,200
     Alpha,C:,20130602193751.532000-240,2100,1232,800,200
     Alpha,D:,20130602193751.532000-240,15500,1232,800,200
     Beta,C:,20130602193751.532000-240,13400,1232,800,200
     Alpha,C:,20130602194751.532000-240,2200,1232,800,200
     Alpha,D:,20130602194751.532000-240,18000,1232,800,200
     Beta,C:,20130602194751.532000-240,15000,1232,800,200
     Alpha,C:,20130602195751.532000-240,2500,1232,800,200
     Alpha,D:,20130602195751.532000-240,21000,1232,800,200
     Beta,C:,20130602195751.532000-240,18000,1232,800,200

   at the second line, the column view will look like

     FILE: demo.csv Spark Lines use Values for plotting

       Line:                 2
       System:               Alpha
       Disk:                 C:
       Time:                 20130602190751.532000-240
       IO Rate:              1000
       Bytes Transferred:    1232
       Read Rate:            800
       Write Rate:           200

   While in this buffer we can navigate to other rows in the CSV file by
using the 'n' and 'p' key, which will go to the next respectively
previous row in the underlying CSV file.

Formatting
==========

The timestamps are still a bit hard to read.  If we are looking at these
files a lot, it is worth configuring CSV Lens so it will display these
timestamps nicely.

   One way of doing this is to apply do the following:

     (defun example-format-time (time)
       "Return a nicely formatted TIME."
       (if (> (length time) 18)
           (let ((year (substring time 0 4))
                 (month (substring time 4 6))
                 (day (substring time 6 8))
                 (hour (substring time 8 10))
                 (minute (substring time 10 12))
                 (second (substring time 12 14))
                 (offset (number-to-string
                           (/ (string-to-number (substring time -4)) 60))))
             (concat year "-" month "-" day " "
                     hour ":" minute ":" second " (" offset ")*" ))
         time))

     (add-to-list 'csv-lens-configurations
                  '("Example"
                     (("Time"
                       :format-function example-format-time))))

   The details of how this works are explained later.  But the most
important part is that you can see that we associate with the 'Time'
column the function 'example-format-time' function.

   After applying the above code the column view will look like this

     FILE: example.csv Type: Example Spark Lines use Values for plotting

       Line:              2
       System:            Alpha
       Disk:              C:
       Time:              2013-06-02 19:07:51 (-4)*
       IO Rate:           1000
       Bytes Transferred: 1232
       ReadsRate:         800
       Write Rate:        200

   To see the original value in the CSV file you disable/enable the
formatting by using 'f' key, which is bound to 'csv-lens-format-toggle'.

Keys
====

In the underlying CSV file there are multiple rows about 'System'
'Alpha' and 'Disk' 'C:', each for a different timestamp.  CSV Lens
allows quick navigation to go to the next or previous rows describing
the same thing.

   First step is telling CSV Lens what the columns are that identify the
same thing.  This can be done by pressing the 'K' key when point is on
the line 'System' and 'Disk'.  This will indicate that these columns are
considered key columns and the status of these columns is marked by the
letter 'K' in the left column, like this

     FILE: example.csv Type: Example Spark Lines use Values for plotting

       Line:              2
     K System:            Alpha
     K Disk:              C:
       Time:              2013-06-02 19:07:51 (-4)*
       IO Rate:           1000
       Bytes Transferred: 1232
       Reads Rate:        800
       Write Rate:        200

   After this step the keys 'N' and 'P' will move the next respectively
the previous line in the CSV file for which the 'System' and 'Disk'
fields have the same value.

   In addition, it will show the file now in three column mode, one
column for the current row, one column for the previous displayed and
one column showing the difference, like this:

     FILE: example.csv Type: Example Spark Lines use Values for plotting

       Line:              5                         2                         3
     K System:            Alpha                     Alpha
     K Disk:              C:                        C:
       Time:              2013-06-02 19:17:12 (-4)* 2013-06-02 19:07:51 (-4)*
       IO Rate:           1200                      1000                      200
       Bytes Transferred: 1232                      1232                      0
       Reads Rate:        800                       800                       0
       Write Rate:        200                       200                       0

   The example above is the situation after pressing 'N' in the previous
screenshot.  We see that we moved from line 2 to line 5.  The second
column still shows the values of line 2 and the third column shows the
difference.

   Just like the formatting function, we can specify that some columns
are key columns by default:

     (add-to-list 'csv-lens-configurations
                  '("Example"
                     (("Time"
                       :format-function example-format-time)
                      (("System" "Disk") :key t))))


File: csv-lens.info,  Node: Navigating,  Next: Columns,  Prev: Example,  Up: Using CSV Lens

2.2 Navigating
==============

When in the CSV Lens Detail buffer you can select a different row of the
underlying CSV file to be displayed.  The most basic of navigational
commands are

'n'
'csv-lens-next'
     Show the content of the next line of the underlying CSV file.  This
     command ignores any setting of key columns.

'p'
'csv-lens-prev'
     Show the content of the previous line of the underlying CSV file.
     Like the 'n' command, it ignores any setting of key columns.

   More sophisticated navigation take into account the values of the key
columns [see xref key column etc.]

'N'
'csv-lens-next/prev-record'
     Show the content of the next line for which the values of the key
     columns are the same as the currently selected row.
'P'
'csv-lens-next/prev-record'
     Similarly to the 'N' command, but looks backwards.
'<'
'csv-lens-jump-first-line-for-key-value'
     Shows the content of the first line in the CSV file for which the
     key columns have the same value as for the currently selected row.
'>'
'csv-lens-jump-last-line-for-key-value'
     This will show the last line in the CSV file for which the key
     columns have the same value the current selected row.
'j'
'csv-lens-next-value'
     Show the content of the first line for which the value for the
     selected column is different, but for which the key column values
     are the same.

     The selected column is the column corresponding the row under point
     in the CSV Lens Detail buffer.  If the cursor is on a key column it
     will give an error, because looking at all rows for which the key
     columns are the same will obviously not find a new value for the
     selected column.
'k'
'csv-lens-prev-value'
     The same as 'j' but this command looks backwards in the file.

   Additionally it is possible to re-synchronize the CSV Lens Detail
buffer with the underlying CSV buffer.

'C-RET'
'M-x csv-lens-pop-to-source-buffer'
     Select the buffer of the underlying CSV file.  This will not move
     point in the CSV buffer, nor update the CSV Detail buffer.
'o'
'M-x csv-lens-switch-to-source-buffer'
     Select the buffer of the underlying CSV file, and move point in the
     CSV buffer to the currently selected row in the CSV Detail Buffer.
'.'
'csv-lens-current'
     Update the content of the CSV Detail buffer to show the content for
     point in the underlying CSV buffer.


File: csv-lens.info,  Node: Columns,  Next: Column Formatting,  Prev: Navigating,  Up: Using CSV Lens

2.3 Columns
===========

Each column in the CSV file is shown as a line in the CSV Detail buffer.
Not all columns are equal, some are key columns, some you might want to
hide etc.  The properties of the column can be modified with the
following key bindings

'K'
'csv-lens-toggle-key-column'
     Mark the column as key column.  (If the column is already a key
     column un-mark the column.)  Key columns are important because they
     determine which rows in the CSV file go together.  This is used for
     navigation and plotting the spark-lines.  [ADD XREF for both].

'h'
'csv-lens-hide-column'
     Hide the column from display.  Or un-hide the column if it is
     already hidden.  A hidden column is not shown, unless the show all
     is activated (*Note csv-lens-column-ignore-state-toggle:
     unhide-all.)  To un-hide a hidden column, first use the show all to
     show the hidden columns, then un hide it with 'h' again.

'b'
'csv-lens-bold-column'
     Highlight the column (bold).  This will make the column stand out
     between the other columns.  Like all other column state, when used
     on a highlighted column, un-highlight it.

'c'
'csv-lens-hide-constant-columns'
     Hide all constant columns.  A column is considered constant if the
     values for the column are constant for each key(s) separately.

   The following changes cannot be made for individual columns but are
global (they apply to all columns).

's'
'csv-lens-column-ignore-state-toggle'
     Show all, this will ignore the hide state of any column and show
     them again.  This is convenient to bring back hidden columns.

'U'
'csv-lens-normal-all'
     Remove all marks from the columns and reverting them to normal.

'f'
'csv-lens-format-toggle'
     Toggle the formatting of the columns.  (*Note Column Formatting::).

* Menu:

* Column Formatting::
* Key Columns::


File: csv-lens.info,  Node: Column Formatting,  Next: Key Columns,  Prev: Columns,  Up: Columns

2.3.1 Column Formatting
-----------------------

The displayed values from the underlying CSV file can be formatted with
formatting functions.  By default, the value is displayed as is.  If
that is not required, a formatting function can be applied.  A
formatting function is a function that takes one argument, the value to
be converted, which is a string.  The result of the formatting function
should also be a string.

   The actual formatting function being used is determined by the column
name, in the following way:

  1. If the formatting is disabled, use the 'identity' function, which
     returns the string as is.  By default formatting is enabled.  This
     can be toggled with 'f' or 'csv-lens-format-toggle'.
  2. If the user has manually selected a formatting function, the user
     specified format function is used.

     Manually selecting a formatting can be done by pressing 'F', or
     calling 'csv-lens-set-key-column-formatter'.  This will provide the
     user with the choice of the formatters listed in
     'csv-lens-formatters'.  *Note Formatters for Interactive Use::.

  3. If in the current configuration [ADD XREF] a format function is
     specified for this column, use that one.
  4. If in the current configuration the column t has a format function
     specified, use that one.
  5. Finally, if none of the above is relevant, use 'identity' and use
     the string as is.


File: csv-lens.info,  Node: Key Columns,  Prev: Column Formatting,  Up: Columns

2.3.2 Key Columns
-----------------


File: csv-lens.info,  Node: Compare/Difference,  Prev: Columns,  Up: Using CSV Lens

2.4 Compare/Difference
======================


File: csv-lens.info,  Node: Customizing,  Prev: Using CSV Lens,  Up: Top

3 Customizing
*************

There are two variables available to modify the behaviour of CSV Lens:

'csv-lens-configurations'
     This variable determines the default state of the columns being
     displayed.  This is described in *note Multiple Sets of
     Configurations::.  The configuration options for a single
     configuration are descibed in *note Configuration one Type of CSV
     File::.

'csv-lens-formatters'
     A list of formatters that are available for interactive use.

   -----------------

  1. Determine the header names of the columns of the CSV file

  2. Use the header names to determine a configuration

  3. Use the configuration to format the detail buffer.

   Step 1 is hardcoded, but step 2 and 3 together detemine how the
detail buffer displays the underlying data.  The following two sections
describe these two steps.

* Menu:

* Multiple Sets of Configurations::
* Configuration one Type of CSV File::
* Formatters for Interactive Use::


File: csv-lens.info,  Node: Multiple Sets of Configurations,  Next: Configuration one Type of CSV File,  Prev: Customizing,  Up: Customizing

3.1 Multiple Sets of Configurations
===================================

Different CSV files have different needs for formating.  It is therefore
possible to switch between sets of configurations.  Also, the mode will
try to select automatically the best configuration for the particular
CSV file.

   The list of configurations that are considered is stored in the
variable 'csv-lens-configurations'.  Each entry of this list is list of
either 2 or 3 elements like this:

     (name configuration)
     (name configuration compare-function)

   Here 'name' is a string that names the configuration.  This name can
be used to force CSV-Lens to use a specific configuration if the
automatic detection does not work correctly.

   The 'configuration' part is either a list of specifications, as
documented in *note Configuration one Type of CSV File::, or a function
returning such a configuration.

   If 'configuration' is a function, it should be a function taking one
argument, which is a list of strings containing the column headers.

   The optional 'compare-function' is used to decide which configuration
is used for the file.

   This function has three arguments 'configuration', 'best-upto-now',
and 'columns'.  The return value of this function should be either 'nil'
or a 'configuration', which is considered the best upto now, and will be
used as the 'best-upto-now' argument in the next invocation of a compare
function.

   A note about returning 'nil'.  When implementing a 'compare-function'
one normally only returns 'nil' if both hold true: The argument
'configuration' is not a valid configuration for the 'columns' and
'best-upto-now' is 'nil'.  This is because the idea is that this
function will return the best of the two arguments.

   The default implementation does a lexical compare between '(columns -
configuration, configuration - columns)'.  If it is a tie, it returns
the 'best-upto-now' configuration, ensuring the first listed
configuration wins.

   The lexical compare has the effect that it gives preference to:
  1. The most columns in the CSV file have an entry in the
     configuration.
  2. If that is the same, the smallest configuration winds.


File: csv-lens.info,  Node: Configuration one Type of CSV File,  Next: Formatters for Interactive Use,  Prev: Multiple Sets of Configurations,  Up: Customizing

3.2 Configuration one Type of CSV File
======================================

A configuration for a CSV file is an alist whose keys are column names
or a list of column names and the values are property lists containing
the default state of the columns.

   So in general the format is a list of specifications, where each
specification looks like:
'(COLUMN-NAME . PROPERTY-LIST)'
'((COLUMN-NAME-1 COLUMN-NAME-2 ...) . PROPERTY-LIST)'

   The 'COLUMN-NAME' is normally a string, which is compared to the
column headers in the CSV file (case sensitive).  As a special case
'COLUMN-NAME' can be t, which matches any column and can be used to
provide default values for all columns in the CSV file.

   The 'PROPERTY-LIST' describes the column and can contain the
following keys
':key'
     A boolean, 't' if the column is considered a key column.  The
     default value is 'nil'.
':bold'
     A boolean, 't' if the column should standout.  The default value is
     'nil'.
':hidden'
     A boolean, 't' if the column should be hidden.  The default value
     is 'nil'.
':diff-function'
     A function taking two arguments, each being the un parsed string
     value of a value of column and returning a string representation of
     the difference.

     This function is used for displaying the difference between two
     subsequent records.  See 'N' and 'P' for ways to display the
     difference.

     If no function is specified it defaults to 'csv-lens-diff-number'.
     This function will try to parse the argument as numbers and display
     their difference.
':format-function'
     A function taking one argument, the un parsed string value, and
     returning a string to display.  This function is active unless
     formatting is disabled by 'f' ('csv-lens-format-toggle').

     The default is 'identity'.


File: csv-lens.info,  Node: Formatters for Interactive Use,  Prev: Configuration one Type of CSV File,  Up: Customizing

3.3 Formatters for Interactive Use
==================================



Tag Table:
Node: Top313
Node: Installing849
Node: Activating1562
Node: Using CSV Lens2187
Node: Example2408
Node: Navigating8745
Node: Columns11246
Ref: unhide-all12795
Node: Column Formatting13222
Node: Key Columns14737
Node: Compare/Difference14857
Node: Customizing14991
Node: Multiple Sets of Configurations16046
Node: Configuration one Type of CSV File18380
Node: Formatters for Interactive Use20368

End Tag Table


Local Variables:
coding: utf-8
End:
